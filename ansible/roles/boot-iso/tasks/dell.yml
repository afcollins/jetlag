---
# Dell tasks for booting an iso

- name: Set Virtual Media ISO
  set_fact:
    _virtual_media_iso: "{{ virtual_media_iso | default(hostvars[item]['boot_iso']) }}"

- name: Dell - Power down machine prior to booting iso
  shell: |
    ipmitool -I lanplus -H {{ hostvars[item]['bmc_address'] }} -U {{ hostvars[item]['bmc_user'] }} -P {{ hostvars[item]['bmc_password'] }} chassis power off
  ignore_errors: true
  register: ipmi_poweroff

- name: Dell - Pause for power down
  pause:
    seconds: 10
  when: not ipmi_poweroff.failed

- name: Dell - Set OneTimeBoot VirtualCD
  uri:
    url: "https://{{ hostvars[item]['bmc_address'] }}/redfish/v1/Managers/iDRAC.Embedded.1/Actions/Oem/EID_674_Manager.ImportSystemConfiguration"
    user: "{{ hostvars[item]['bmc_user'] }}"
    password: "{{ hostvars[item]['bmc_password'] }}"
    method: POST
    headers:
      content-type: application/json
      Accept: application/json
    body:
      {
        "ShareParameters": { "Target": "ALL" },
        "ImportBuffer": '<SystemConfiguration><Component FQDD="iDRAC.Embedded.1"><Attribute Name="ServerBoot.1#BootOnce">Enabled</Attribute><Attribute Name="ServerBoot.1#FirstBootDevice">VCD-DVD</Attribute></Component></SystemConfiguration>',
      }
    body_format: json
    validate_certs: no
    status_code: 202
    return_content: yes

- name: Dell - Check for Virtual Media
  uri:
    url: "https://{{ hostvars[item]['bmc_address'] }}/redfish/v1/Managers/iDRAC.Embedded.1/VirtualMedia/CD"
    user: "{{ hostvars[item]['bmc_user'] }}"
    password: "{{ hostvars[item]['bmc_password'] }}"
    method: Get
    headers:
      content-type: application/json
      Accept: application/json
    body: {}
    body_format: json
    validate_certs: no
    status_code: 200
    return_content: yes
  register: check_virtual_media

- name: Block to rescue incase of stuck virtual media
  when: check_virtual_media.json.Image
  block:
  - name: Dell - Eject any CD Virtual Media
    uri:
      url: "https://{{ hostvars[item]['bmc_address'] }}/redfish/v1/Managers/iDRAC.Embedded.1/VirtualMedia/CD/Actions/VirtualMedia.EjectMedia"
      user: "{{ hostvars[item]['bmc_user'] }}"
      password: "{{ hostvars[item]['bmc_password'] }}"
      method: POST
      headers:
        content-type: application/json
        Accept: application/json
      body: {}
      body_format: json
      validate_certs: no
      status_code: 204
      return_content: yes

  rescue:
    # Use racadm to address the failed redfish unmount of old virtual media
    - name: Force mount of a existing image
      raw: racadm remoteimage -c -u "" -p "" -l http://{{ http_store_host }}:{{ http_store_port }}/{{ _virtual_media_iso }}
      delegate_to: "{{ hostvars[item]['bmc_address'] }}"
      vars:
        ansible_user: "{{ hostvars[item]['bmc_user'] }}"
        ansible_password: "{{ hostvars[item]['bmc_password'] }}"
        ansible_ssh_common_args: '-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null'

    - name: Force unmount of the existing image
      raw: racadm remoteimage -d
      delegate_to: "{{ hostvars[item]['bmc_address'] }}"
      vars:
        ansible_user: "{{ hostvars[item]['bmc_user'] }}"
        ansible_password: "{{ hostvars[item]['bmc_password'] }}"
        ansible_ssh_common_args: '-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null'

- name: DELL - Insert Virtual Media
  community.general.redfish_command:
    category: Manager
    command: VirtualMediaInsert
    baseuri: "{{ hostvars[item]['bmc_address'] }}"
    username: "{{ hostvars[item]['bmc_user'] }}"
    password: "{{ hostvars[item]['bmc_password'] }}"
    virtual_media:
      image_url: "http://{{ http_store_host }}:{{ http_store_port }}/{{ _virtual_media_iso }}"
      media_types:
        - CD
        - DVD
    resource_id: iDRAC.Embedded.1
  register: result
  until: not result.failed
  retries: 5
  delay: 30

- name: DELL - Power ON
  community.general.redfish_command:
    category: Systems
    command: PowerOn
    baseuri: "{{ hostvars[item]['bmc_address'] }}"
    username: "{{ hostvars[item]['bmc_user'] }}"
    password: "{{ hostvars[item]['bmc_password'] }}"
  register: result
  until: not result.failed
  retries: 5
  delay: 30
